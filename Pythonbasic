# import calendar
# utensil = {"cup", "bowl", "spoon"}
# dishes = {"knife", "folk", "plate", "cup", "bowl"}
# yy=2024
# mm=12
# print(calendar.month(yy,mm))
# utensil.add("aung")
# utensil.remove("spoon")
# dishes.update(utensil)
# dinner_table = utensil.union(dishes)
# print(dishes.difference(utensil))
# print(dishes.intersection(utensil))
# dishes.intersection_update(utensil)
# print(dishes)
# for x in dinner_table:
#     print(x)
#
# name= "AungGod"
# first_name= name[0:].upper()
# last_chracter = name[-1]
# print(first_name)
# print(last_chracter)

# def hello(name1,name2,age):
#     print("have a nice day")
#     print(name1+"God"+name2+"\ooo"+str(age))
# hello("Aung","Pro player",1)
# def show(a1,a2,a3):
#     print("Aung"+a1+a3+a2)
# show(a1="is",a3="player",a2="dota2")

# def add1(*stuff):
#     Sum1 = 0
#     stuff = list(stuff)
#     stuff[1]=0
#     for i in stuff:
#         Sum1 += i
#     return Sum1

# def hello(**aung):
#     print("Hello")
#     for key,value in aung.items():
#         print(key)
# hello(title= "aung",name= "Khant",A="kyaw")

# str formnat
# animal="cow"
# item="moon"
# print("the {} jumped over the {}".format(animal,item))
# print("the {1} jumped over the {0}".format(animal,item))
# print("the {animal} jumped over the {item}".format(animal='cow',item='moon'))
#
# text= "the {} jumped over the {}"
# print(text.format(item,animal))
# name = "Aung"
# print("hello ,my name is {}".format(name))
# print("Hello, my name is {0:10}.nice to meet u".format(name))
# print("Hello, my name is {:<10}.nice to meet u".format(name))
# print("Hello, my name is {:>10}.nice to meet u".format(name))
# print("Hello, my name is {:^10}.nice to meet u".format(name))
# number = 3100
# print("the number is {:.3f}".format(number)) # 3 decimal digits
# print("the number is {:,}".format(number)) #thousands spearator
# print("the number is {:b}".format(number))# binary
# print("the number is {:o}".format(number))# octal
# print("the number is {:x}".format(number))#hexadecimal
# print("the number is {:E}".format(number))#scientific notation

# import random
# x=random.randint(1,6)
# z=random.random()#floating point 0 to 1
# y=random.uniform(0,10) # floating point 0 to 10
# print(y,x)
# Mylist=[1,2,3]
# a= random.choice(Mylist)
# print(a)
# cards =[1,2,3,4,5,6,7,8,9,10,"J","K","Q","A"]
# random.shuffle(cards)
# print(cards)

# expection= event detected during excution that interrupt  the flow of a program
# try:
#     numerator=int(input("enter the number to divide:"))
#     denominator=int(input("enter the number divide by"))
#     result= numerator/denominator
# except ZeroDivisionError as a:
#     print(a)
#     print("u cant divide by zero!")
# except ValueError as a:
#     print(a)
#     print("enter only number")
# except Expection as a:
#     print(a)
#     print("something wrong! Try again. ")
# else:
#     print(result)
# finally:
#     print("This will alaways execute")
# #
# import os
# path = "C:\\Users\\USER\\Documents\\test"
# if os.path.exists(path):
#     print("The location exists")
#     if os.path.isfile(path):
#         print("this is the file")
#     if os.path.isdir(path):
#         print("this is the directory")
# else:
#     print("the location not exist")
# import os

# Define the directory path
# import os
# path = "C:\\Users\\USER\\Documents\\test.txt"
#
# # Check if the directory exists
# if os.path.exists(path):
#     print("The location exists")
#
#     # Check if the path is a file
#     if os.path.isfile(path):
#         print("This is a file")
#
#     # Check if the path is a directory
#     elif os.path.isdir(path):
#         print("This is a directory")
#
# else:
#     # If the directory does not exist, create it
#     os.makedirs(path)
#     print("Created directory:", path)
#
# # Create the file "text.txt" in the directory
# file_path = os.path.join(path, "text.txt")
# with open(file_path, "w") as file:
#     file.write("This is a new text file.")
#     print("Created file:", file_path)
# try:
#     with open('C:\\Users\\USER\\Documents\\test\\text.tx') as file:
#         print(file.read())
# except FileNotFoundError:
#         print("the  file is not found")
# # print(file.closed)
# t1="anjing dog"
# # with open('test.txt','w') as file:
# #     file.write(t1)
# with open('test.txt','a') as file:
#     file.write(t1)
# import shutil
# t1= 'i am god'
# shutil.copyfile('test.txt','content.txt')
# shutil.copy2('test.txt','C:\\Users\\USER\Documents\\test1.txt')
# with open('C:\\Users\\USER\Documents\\test1.txt','a') as file:
#     file.write(t1)
# shutil.copy2('C:\\Users\\USER\Documents\\test1.txt','C:\\Users\\USER\\PycharmProjects\\pythonProject')
# import os
# source="folder"
# destination="C:\\Users\\USER\\folder"
#
# try:
#     if os.path.exists(destination):
#         print("there is destination file")
#     else:
#         os.replace(source,destination)
#         print("the file is removed")
# except  FileNotFoundError:
#     print(source+"was removed")

import os
# import shutil
#
# path ="folder"
# try:
#     # os.remove(path) # remove path doesn't remove empty folder
#    # os.rmdir(path) # remove directory
#      shutil.rmtree(path)# delete entring file containing other sub file
# except FileNotFoundError:
#     print("there is no file")
# except PermissionError:
#     print("you do not have permission to delete")
# except OSError:
#     print("you cannot using that file with this function")
# else:
#     print(path+"was deleted")

# import messages
# messages.bye()
# messages.hello()
# import messages as msg
# msg.bye()
# msg.hello()

# from messages import hello,bye
# from messages import*
# bye()
# hello()
# help("modules")

import random
# choices = ['rock','scissors','paper']
# while True:
#       computer = random.choice(choices)
#       player = None
#
#       while player not in choices:
#             player = input("rock or scissors or paper?:").lower()
#       if player == computer:
#          print("computer",computer)
#          print("player",player)
#          print("Tie")
#       elif player == "rock":
#            if computer == "scissors":
#             print("computer", computer)
#             print("player", player)
#             print("player win!")
#       if computer == "paper":
#             print("computer", computer)
#             print("player", player)
#             print("player lose!")
#       elif player == "scissors":
#            if computer == "paper":
#                print("computer", computer)
#                print("player", player)
#                print("player win!")
#            if computer == "rock":
#                print("computer", computer)
#                print("player", player)
#                print("player lose!")
#       elif player == "paper":
#              if computer == "rock":
#                print("computer", computer)
#                print("player", player)
#                print("player win!")
#              if computer == "scissors":
#                print("computer", computer)
#                print("player", player)
#                print("player lose!")
#       play_again = input("play again or not (Yes/No?)").lower()
#
#       if play_again == "no":
#             break
#
# print("Bye")
# def new_game():
#     guesses= []
#     correct_guess=0
#     question_num = 1
#     for b in question.keys():
#         print("---------------")
#         print(b)
#         for a in option[question_num-1]:
#             print(a)
#         guess=input("Enter(A,B,C,D)")
#         guess = guess.upper()
#         guesses.append(guess)
#         correct_guess += check_answer(question.get(b), guess)
#         question_num += 1
#     display_score(correct_guess , guesses)
#
# #
# def check_answer(answer, guess):
#     if answer == guess:
#         print("CORRECT")
#         return 1
#     else:
#         print("wrong!")
#         return 0
# def display_score(correct_guess, guesses):
#     print("-------------------")
#     print("RESULTS!")
#     print("----------------")
#     print("ANSWERS:" ,end="")
#     for i in question:
#         print(question.get(i), end=" ")
#     print()
#     print("Guesses:", end=" ")
#     for i in guesses:
#         print(i,end=" ")
#     print()
#     score =int((correct_guess/len(question))*100)
#     print("your score is" +str(score)+"%")
#
# def play_again():
#     response =  input('Do u want to answer again!(YES/NO)')
#     response=response.upper()
#     if response== "YES":
#         return True
#     else:
#         return False
#
#
# question={
# 'who created the Python?' : 'A',
# 'what is python created' : 'B',
# 'python is tributed to which cedy group' : 'C',
# 'Is earth around?' : 'D'
# }
#
# option =[
# ["A.A1","B.B1" ,"C,C1" ,"D,D1"],
# ["A.B2" ,"B.B2","C.C2" ,"D.D2"],
# ["A.A3" ,"B.B3" ,"C.C3" ,"D.D3"],
# ["A.A4" ,"B.B4", "C.C4", "D.D4"]
# ]
# new_game()
#
# while play_again():
#     new_game()
#
# print("Bye")

# from classfile import Car
# car_1 = Car("Chevy", "Corvette", 2021, "blue")
# car_2 = Car("Ahevy", "Aorvette", 2022, "Ylue")
# # print(car_1.make)
# # print(car_1.color)
# # print(car_2.year)
# # print(car_1.model)
# car_1.wheel =2
# # car_1.stop()
# # car_1.drive()
# # car_2.drive()
# print(car_1.wheel)
# print(car_2.wheel)

# class Animal:

#     def __init__(self, alive, variety ,Generic):
#         self.alive = alive  # Set the alive attribute
#         self.variety = variety  # Set the variety attribute
#         self.Generic = self.variety
#     def eat(self):
#         print(f"The {self.variety} is eating.")
#         print(f"the {self.alive}")
#         print(f"{self.Generic} is animal")

#     def sleep(self):
#         print(f"The {self.variety} is sleeping.")
#         print(f"the {self.alive}")


# class Rabbit(Animal):
#     variety = "Rabbit"
#     alive = "alive"

# class Fish(Animal):
#     variety = "Fish"
#     alive = "alive"

# class Hawk(Animal):
#     variety = "Hawk"
#     alive = "alive"
# rabbit = Rabbit("alive", "Rabbit","Generic")
# fish = Fish("alive", "Fish","Generic")
# hawk = Hawk("alive", "Hawk","Generic")
# print()
# fish.eat()
# hawk.eat()
# print(fish.alive)

# class Animal:
#     alive = True
#     def eat(self):
#         print(f"The animal  is eating.")
#
#
#     def sleep(self):
#         print(f"The animal is sleeping.")
#
#
# class Rabbit(Animal):
#       def run(self):
#           print("the rabbit is running")
#
# class Fish(Animal):
#       def swim(self):
#           print("the fish is swimming")
# class Hawk(Animal):
#       def fly(self):
#           print("The hawk is flying")
#
# rabbit = Rabbit()
# fish = Fish()
# hawk = Hawk()
#
# print(rabbit.alive)
# fish.eat()
# hawk.sleep()
#
# rabbit.run()
# fish.swim()
# hawk.fly()
#
# class Organism:
#     alive =True
#
# class Animal(Organism):
#      def eat(self):
#         print("the dog is eatiing")
#
# class Dog(Animal):
#      def bark(self):
#         print("the dog is barking")
#
#
# dog = Dog()
# print(dog.alive)
# dog.eat()
# dog.bark()
#
#
# class Prey:
#
#       def flee(self):
#           print("the animal flees")
#
# class Predator:
#
#       def hunt(self):
#           print("the animal is hunting")
#
# class Rabbit(Prey):
#        pass
#
# class  Hawk(Predator):
#        pass
#
# class  Fish(Prey,Predator):
#        pass
#
# rabbit = Rabbit()
#
# hawk = Hawk()
# fish = Fish()
#
# rabbit.flee()
# hawk.hunt()
# fish.hunt()

# class Car:
#
#     def turn_on(self):
#         print("You start the Enginee")
#         return self
#
#     def drive(self):
#         print("You drive the car")
#         return self
#
#     def brake(self):
#         print("You step on the brakes")
#         return self
#
#     def turn_off(self):
#         print("You turn off the Enginee")
#         return self
#
# car = Car()
#
# car.turn_on()\
#     .turn_off()\
#     .brake()\
#     .drive()
# class Rectangle:
#     def __init__(self, length, width):
#         self.length = length
#         self.width = width
#
# class Square(Rectangle):
#     def __init__(self, length,width):
#         super().__init__(length, width)  # Square has equal length and width
#
#     def area(self):
#         return self.length * self.width  # Area of square is length squared
#
# class Cube(Rectangle):
#     def __init__(self, length,width, height):
#         super().__init__(length,width)  # Cube has equal length, width, and height
#         self.height = height
#
#     def volume(self):
#         return self.length * self.width * self.height  # Volume of cube is length squared times height
#
# # Create instances
# area1 = Square(2,2)
# volume1 = Cube(2, 2,2)
#
# # Calculate and print area and volume
# print("Area of the square:", area1.area())
# print("Volume of the cube:", volume1.volume())

#
# print(area1.area())
# print(volume1.volume())
#
# from abc import ABC, abstractmethod
# class Vehicle(ABC):
#     @abstractmethod
#     def go(self):
#         pass

#     @abstractmethod
#     def stop(self):
#         pass
# class Car(Vehicle):
#     def go(self):
#         print("you drive the car")
#     def stop(self):
#         print("you stop the car")
# class Motorcycle(Vehicle):
#     def go(self):
#         print("You ride the motorcycle")

#     def stop(self):
#         print("You ride the motorcycle")

# # vehicle= Vehicle()
# car = Car()
# motorcycle = Motorcycle()

# # vehicle.go()
# car.go()
# motorcycle.go()
# car.stop()
# motorcycle.stop()

# class Car:
#       color = None
# class Motocycle:
#       color = None
# def changecolor(vehicle,color):
#     vehicle.color = color
#
# Car_1 = Car()
# Car_2 = Car()
# Car_3 = Car()
# changecolor(Car_1,"The car is Red")
# changecolor(Car_2,"The car is Red")
# changecolor(Car_3,"The car is Red")
# bike_1 = Motocycle()
# bike_2 = Motocycle()
# bike_3 = Motocycle()
# changecolor(bike_1,"The motocycle is Red")
# changecolor(bike_2,"The motocycle is Red")
# changecolor(bike_3,"The motocycle is Red")
# print(Car_1.color)
# print(Car_2.color)
# print(Car_3.color)
# print(bike_1.color)
# print(bike_2.color)
# print(bike_3.color)
#
# class Duck:
#     def walk(self):
#         print("The duck is walking")
#     def talk(self):
#         print("The duck is qwuacking")
#
# class Chicken:
#     def walk(self):
#         print("The chicken is walking")
#     def talk(self):
#         print("The chicken is clucking")
#
# class Input:
#     def __init__(self, IN):
#         self.IN = IN
#
# class Person(Input):
#     alive = True
#
#     def __init__(self, IN):
#         super().__init__(IN.upper())  # Pass the input to the Input class constructor and convert to uppercase
#
#     def catch(self):
#         if self.IN != "CHICKEN":  # Access the input from the superclass
#             duck.talk()
#             duck.walk()
#             print("The duck is caught")
#         else:
#             chicken.talk()
#             chicken.walk()
#             print("The chicken is caught")
#
# # Create instances of the classes
# duck = Duck()
# chicken = Chicken()
#
# # Get input from the user
# IN = input("Say that you get ")
#
# # Create an instance of Person with the input
# person = Person(IN)
#
# # Call the catch method with the input
# person.catch()
# print(Person.alive)

# Warlus  operator  :=

# new to Python 3.8
# assignment expression aka warlus operator
# assigns values to variables as part of a larger expression

# foods = list()
# while True:
#     food = input("What food do u like?: ")
#     if food == "quit":
#         break
#     foods.append(food)
# print(foods)

# foods = list()
# while food := input("what kinds of food do u like ?:") != "quit":
#     foods.append(food)
# print(foods)

# def hello():
#     print("hello")
# hi = hello
# print(hello)
# hi()
# print(hi)
#
# say = print
# say("WHO")
# a = 1
# def loud(text):
#     return text.lower()
# def soft(text):
#     return text.upper()
#
# def hello(func,func_name):
#     text = func("hello")
#     print(text)
#     print(f"ur use function is {func_name}")
#
# hello(loud,"loud")
# hello(soft,"soft")
# def divisor(x):
#     def dividend(y):
#         return y/x
#     return dividend
#
# divide = divisor(2)
# print(divide(10))
# def apply_operation(operation, x, y):
#     return operation(x, y)
#
# def add(x, y):
#     return x + y
#
# def subtract(x, y):
#     return x - y
#
# result1 = apply_operation(add, 5, 3)
# print("Result of addition:", result1)  # Output: 8
#
# result2 = apply_operation(subtract, 5, 3)
# print("Result of subtraction:", result2)  # Output: 2
# lambda arguments : expression #  x : x+2,iteration
#
# x=4
# even_value = lambda x:print(2) if x % 2 == 0 else None
# #
# even_value(x)
# double = lambda x:x+2
# multiply = lambda x,y : x*y,x*y
# add = lambda x,y,z : x+y+z
# division = lambda x,y,z : (x/y)/z
# full_name =lambda first_name , second_name: first_name+"      "+second_name
# age_check = lambda age : print("adult") if age > 18 else print("not adult")
# age_check(25)
# age_check1 = lambda age : True if age > 18 else False
# print(age_check1(18))
# sort() METHOD = USED WITH LIST
# sort() Function = used with iterables

# students =["aung","IY","IZY","Pro"]
# students.sort(reverse=True)
#
# for i in students:
#     print(i)
# in tuple
# students = ("aung", "IY", "IZY", "Pro")
# sorted_student = sorted(students,reverse=True)
#
# for i in students:
#     print(i)

#
# students = (("aung","F",0),
#             ("IY","D",20),
#             ("IZY","C",40),
#             ("Pro","A",100))
# grades = lambda grade:(grade[1],grade[2])
# students_sorted =sorted (students,key=grades,reverse=True)
# # age_mapping = {'F':20,'D':20,'C':40,'A':100}
# age_mapping = {0:20,20:40,40:60,100:80}
# for i in students_sorted:
#     print(i)
# for student in students_sorted:
#     name, grade, score = student
#     age = age_mapping[score]
#     print(f"{name}'s age is {age}")

# map function (function, iterable)

# store = [("shirt",20),
#          ("watch",200),
#          ("phone",500)]
# to_euro = lambda data: (data[0],data[1]*0.82)
# to_dollars = lambda data :(data[0],data[1]/0.82)
#
# store_dollars = map(to_euro,store)
# for i in store_dollars:
#     print(i)
# filter(function,iterable)
# friends = [("Aung",19),
#            ("Kya",25),
#            ("Min",36),
#            ("Khaing Gyi",30)
#         ]
# age = lambda data: data[1]>= 18
#
# drinking_buddies = list(filter(age,friends))
#
# for i in drinking_buddies:
#     print(i)
# reduce()=apply a function to iterable and reduce it  to a single cumulmative value
# reduce(function,iterable)

# import functools
# letters = ["H","E","L","L","O"]
# word = functools.reduce(lambda x,y:x+y,letters)
# print(word)
# factorial = [5,4,3,2,1]
# number = functools.reduce(lambda x,y: x*y , factorial)
# print(number)

# list comprehension
# lsit =[expression for  item iterable ]
# list =[expression for item iterable if conditional]
# list = [expression if/else for item iteralbe]
# square = []
# for i in range(1,11,2):
#     square.append(i*i)
# print(square)
#
# squares = [i*i for i in range(1,11)]
# print(squares)

# students = [100,90,80,70,60,50,40,30,20,10,0]

# # passed_students = list(filter(lambda x: x >=60,students))
# # passed_students = [i for i in students if i >=60]
# passed_students = [i if i >=60 else "Failed" for i in students]
# print(passed_students)


# DICTIONARY Comprehension = create dictionary using expression
# can replace or loops and certain lambda functions
# dictionary  = {key : expression for (key,value) in iterable}
# dictionary  = {key :( if/else) for(key,value) in iterable}
# cities_in_F = {'New York':32,'Boston':75, 'Bejing': 30, 'Shanghai': 50}

# cities_in_C = {key:round((value)*5/9) for(key,value)in cities_in_F.items()}
# print(cities_in_C)

# Sunny_weather = {'New York':32,'Boston':75, 'Bejing': 30, 'Shanghai': 50}
# Sunny_warm_test={key :("warm" if value >=40 else "Cold") for (key,value) in Sunny_weather.items() }
# print(Sunny_warm_test)
# def check_temp(value):
#     if value >= 70:
#         return "Hot"
#     if  69>=value >=40:
#         return "Warm"
#     else:
#         return "Cold"

# Sunny_weather = {'New York':32,'Boston':75, 'Bejing': 30, 'Shanghai': 50}
# Sunny_warm_test={key :{'Temperature':value, 'condition':check_temp(value)} for (key,value) in Sunny_weather.items()}
# print(Sunny_warm_test)

# zip=aggerate elements from two or more iterables(list,tuples,set,etc)
# create a zip object with paried elemetns stored in tuples for each elements\
# info=["Name","password","status"]
# pass1=("Bro",1234,"guest") or []"Bro",1234,"guest"]
# users = list(zip(info,pass1))

# for i in users:
#     print(i)
# import pytz
# from datetime import datetime
# info=["Name","password","status"]
# pass1=["Bro",1234,"guest"]
# users = dict(zip(info,pass1))
# login_date = datetime.now().strftime("%y/%m/%d %H:%M:%S")
# for key,value in users.items():
#     print(key +" "+ str(value)+"login date :"+login_date)

# -------------------------------------------------

# testing thailand timezone
# import pytz
# from datetime import datetime
# # from tzlocal import get_localzone
# info=["Name","password","status"]
# pass1=["Bro",1234,"guest"]
# users = dict(zip(info,pass1))
# Thailand_timezone = pytz.timezone('Asia/Bangkok')
# Thailand_local = datetime.now(Thailand_timezone)
# login_date = Thailand_local.strftime("The year, month, day is %Y/%m/%d and the hour, minute,seconds is %H:%M:%S ")
# login_date = datetime.now().strftime("%Y")
# for key,value in users.items():
#      print(key +" "+ str(value)+"login date :"+login_date)
# if __name__ == '__main__'
# 1.module can be run as standolone program
# 2.module can be imported and used by other modules
# python intrepter can be set specical variables, one of which is __name__
# then python will execute the code found within other __main__
# def hello(__name__):
#    print("Hello")
# if __name__ == '__main__':
#    print("running this modules directly")
# else:
#    print("running indiretly this module")
# if __name__ == '__main__':
#     hello(__name__)
# import pytz
# # import time
# from datetime import datetime

# time_object =pytz.timezone('Europe/Paris')
# time_real = datetime.now(time_object)
# UTC_Time = time_real.utctimetuple()
# UTC_datetime = datetime(*UTC_Time[:6])
# str_time =UTC_datetime.strftime("%B/%d/%Y %H:%M:%S")
# print(str_time)
# -------------------------------------------------------------------------------
# import time
# time_object = time.localtime()
# time_object1 = time.gmtime(0)
# time_asc = time.asctime(time_object1)
# print(time.ctime(0))
# print(time.ctime(time.time()))
# print(time_object.tm_year)
# print(time_asc)
# import time
# time_string ="20 April 2024"
# time_object =time.strptime(time_string,"%d %B %Y")
# print(time_object)

# (yer,month,days,hour,minutes,sec# day of the week,#day of the year,dst)
# import time
# time_tuple=(2020,4,20,4,20,0,0,0,0)
# time_string = time.asctime(time_tuple)
# print(time_string)
# time_tuple=(2020,4,20,4,20,0,0,0,0)
# time_string = time.mktime(time_tuple)
# print(time_string)
# import time
# import threading
# def breakfast():
#     time.sleep(3)
#     print("I finished the breakfast")

# def study():
#     time.sleep(4)
#     print("I finished study")
#     breakfast()
# def drink():
#     time.sleep(6)
#     print("I drank coffee")
# breakfast()
# study()
# drink()
# print(threading.active_count())
# print(threading.enumerate())

# --------------------------------------------------------------------
# import time
# import threading
# start_time= time.time()
# def breakfast():
#     time.sleep(3)
#     print("I finished the breakfast")
# def study():
#     time.sleep(4)
#     print("I finished study")
# def drink():
#     time.sleep(6)
#     print("I drank coffee")
# x = threading.Thread(target=breakfast,args=())
# x.start()
# y = threading.Thread(target=study,args=())
# y.start()
# z = threading.Thread(target=drink,args=())
# z.start()
# x.join()
# y.join()
# z.join()

# print(threading.active_count())
# print(threading.enumerate())
# print(time.perf_counter())
# end_time= time.time()
# indicator = end_time-start_time
# print("The total time is ",indicator,"second")

# for long time 120s
# import threading
# import time

# def  timer():
#     print()
#     print()
#     count =0
#     while True:
#         time.sleep(1)
#         count +=1
#         print("Logged in for ",count,"seconds")

# x = threading.Thread(target=timer,daemon=True)
# x.start()

# answer = input("DO u wish to exit?")
# from multiprocessing import Process,cpu_count
# import time

# def counter(num):
#      count = 0
#      while count < num:
#         count +=1
# def main():
#     print(cpu_count())
#     start_time = time.perf_counter()
#     a = Process(target=counter,args=(1000000000,))
#     b = Process(target=counter,args=(1000000000,))
#     c = Process(target=counter,args=(1000000000,))
#     d = Process(target=counter,args=(1000000000,))
#     e = Process(target=counter,args=(1000000000,))
#     f = Process(target=counter,args=(1000000000,))
#     g = Process(target=counter,args=(1000000000,))
#     a.start()
#     b.start()
#     c.start()
#     d.start()
#     e.start()
#     f.start()
#     g.start()

#     a.join()
#     b.join()
#     c.join()
#     d.join()
#     e.join()
#     f.join()
#     g.join()
#     end_time = time.perf_counter()
#     total_time = end_time-start_time
#     print("the finished time is ",total_time,"seconds")

# if __name__ == '__main__':
#      main()

# for less time 7.51s
# from multiprocessing import Process, cpu_count
# import time

# def counter(num):
#     count = 0
#     while count < num:
#         count += 1

# def run_processes(num_cores, num_iterations):
#     start_time = time.perf_counter()

#     # Create a list to hold the processes
#     processes = []

#     # Create and start a process for each CPU core
#     for i in range(num_cores):
#         p = Process(target=counter, args=(num_iterations,))
#         processes.append(p)
#         p.start()

#     # Ensure all processes have finished
#     for p in processes:
#         p.join()

#     end_time = time.perf_counter()
#     total_time = end_time - start_time
#     print(f"Finished in {total_time:.2f} seconds using {num_cores} cores.")

# def main():
#     # Determine the number of available CPU cores
#     num_iterations = 100000000
#     num_cores = cpu_count()

#     # Call the function with the number of CPU cores

#     print(f"Number of CPU cores available: {num_cores}")

#     # Number of iterations for the counter function
#     run_processes(num_cores, num_iterations)
# if __name__ == '__main__':
#     main()

#for python console copy and paste it
# from pyvirtualdisplay import Display
# from tkinter import *
# import os

# # Start virtual display
# try:
#     display = Display(visible=0, size=[800, 600])
#     display.start()
#     print("Virtual display started successfully.")
# except Exception as e:
#     print(f"Error starting virtual display: {e}")

# # Instantiate an instance of Tkinter window
# try:
#     window = Tk()
#     window.geometry("420x420")
#     window.title("AUNG")
    
#     # Check if the image file exists
#     image_path = 'image.png'
#     if os.path.isfile(image_path):
#         icon = PhotoImage(file=image_path)
#         window.iconphoto(True, icon)
#     else:
#         print(f"Image file '{image_path}' not found.")
    
#     window.config(background="#2f1075")
    
#     # Run the Tkinter main loop
#     window.mainloop()
# except Exception as e:
#     print(f"Error with Tkinter window: {e}")

# # Stop virtual display
# try:
#     display.stop()
#     print("Virtual display stopped successfully.")
# except Exception as e:
#     print(f"Error stopping virtual display: {e}")



# from tkinter import *   
# window = Tk()
# window.geometry("1000x1000")
# photo = PhotoImage(file='image.png')

# label = Label(window,
#               text="Hello",
#               font=('Arial',24,'bold'),
#               fg='Green',
#               bg='black',
#               relief='raised',
#               borderwidth=10,
#             padx=10,
#              pady=10,
#              image=photo,
#              compound=BOTTOM)
# # label.pack()
# label.place(x=20,y=20)
# window.mainloop()

# from tkinter import *
# from PIL import Image, ImageTk

# # Create the main window
# window = Tk()
# window.title("Original Image")
# window.geometry("600x600")  # Width x Height

# # Load the image using Pillow
# pil_image = Image.open('image.png')

# # Resize the image to fit within 500x500
# pil_image.thumbnail((500, 500))

# # Convert the image to a format that Tkinter can use
# photo = ImageTk.PhotoImage(pil_image)

# # Create a label with the image and other properties
# label = Label(window,
#               text="Original Image",
#               font=('Arial', 24, 'bold'),
#               fg='Green',
#               bg='black',
#               relief='raised',
#               borderwidth=10,
#               padx=20,
#               pady=20,
#               image=photo,
#               compound=BOTTOM)

# # Use place to position the label
# label.place(x=50, y=50)

# # Run the Tkinter event loop
# window.mainloop()

# from tkinter import *
# from PIL import ImageTk,Image

# def click_counter():
#     count =0
#     def clickcount():
#         nonlocal count
#         count+=1
#         label.config(text=f"Button clicked {count} times")
#     return clickcount
# count =0
# def click():
#     global count
#     count+=1
#     print(f"U click {count} time the button")

# window = Tk()
# label = Label(window, text="Button not clicked yet", font=("Arial", 16))
# # label.pack(padx=20,pady=20)
# label.place(x=10,y=10)
# click = click_counter() # for the function of click counter
# pil_image = Image.open('image.png')
# pil_image.thumbnail([400,400])
# photo= ImageTk.PhotoImage(pil_image)

# button = Button(window,
#                 text='Click me',
#                 command=click,
#                 font= ("Comic Sans",30),
#                 fg="#34ebde",
#                 bg ="black" ,
#                 activeforeground="#34ebde" ,
#                 activebackground="black",
#                 state=ACTIVE,
#                 image=photo,
#                 compound= "left" )
# button.pack() 

# window.mainloop()

# from tkinter import *

# window = Tk()
# window.title("User Entry")
# window.geometry("600x400")
# def submit():
#     username = entry_username.get()
#     password = entry_password.get()
#     print("HEllo"+username)
#     print("HEllo"+password)
# def delete():
#     entry_username.delete(0,END)
#     entry_password.delete(0,END)
# def blackspace():
#     entry_username.delete(len(entry_username.get())-1,END)
#     entry_password.delete(len(entry_password.get())-1,END)
# user_label =Label(window,text="username")
# user_label.pack(pady=10)
# entry_username = Entry(window, 
#               font=("Arial",50),
#               fg="#00FF00",
#               bg="black")
# entry_username.pack(pady=10)

# password_label =Label(window,text="password")
# password_label.pack(pady=10)
# entry_password = Entry(window, 
#               font=("Arial",50),
#               fg="#00FF00",
#               bg="black",
#               show="*")
# entry_password.pack(pady=10)
# # entry.insert(0,"AUng")
# button_frame = Frame(window)
# button_frame.pack(pady=20)


# submit_button = Button(button_frame,
#                        text="submit",
#                        command=submit)
# submit_button.pack(side=LEFT,padx=10)
# delete_button = Button(button_frame,
#                        text="delete",
#                        command=delete)
# delete_button.pack(side=LEFT,padx=10)
# backspace_button = Button(button_frame,
#                        text="blackspace",
#                        command=blackspace)
# backspace_button.pack(side=LEFT,padx=10)

# window.mainloop()


#for png format 
# from tkinter import *
# window = Tk()
# def display():  #for x=INTvar()
#     if(x.get()==1):         
#         print("U agree")
#     else:
#          print("U dont agree")
# # def display():  #for x= BooleanVar()
# #     if (x.get()):         
# #         print("U agree")
# #     else:
# #          print("U dont agree")
# # def display():
# #     if (x.get().upper()=="YES"):         
# #         print("U agree")
# #     else:
# #          print("U dont agree")
# python_photo = PhotoImage(file='C:\\Users\\USER\\Downloads\\py.png')
# x = IntVar() 
# # x =BooleanVar()
# # x = StringVar()
# check_button = Checkbutton(window,
#                            text = "Do u need to agree?",
#                            variable=x,
#                            onvalue=1, # for using x= IntVar
#                            offvalue=0,
#                         #    onvalue=True,         #for using x= booleanvar
#                         #    offvalue=False,
#                         #    onvalue="YES",
#                         #    offvalue="NO",
#                            command=display,
#                            font = ('Arial',10),
#                            fg ='#1c733c',
#                            bg='#030303',
#                            compound='left',
#                            image=python_photo,
#                            activebackground='#030303',
#                            activeforeground='#1c733c')
# check_button.pack()
# window.mainloop()



# # for jpg format
# from tkinter import *
# from PIL import Image, ImageTk

# def display():
#     if x.get() == 1:
#         print("U agree")
#     else:
#         print("U don't agree")

# window = Tk()
# # Use PIL to open the image
# image_path = 'C:\\Users\\USER\\Downloads\\py.jpg'
# image = Image.open(image_path)
# # Convert the image to a PhotoImage object
# python_photo = ImageTk.PhotoImage(image)

# # Correct variable reference to x
# x = IntVar()

# # Correct the Checkbutton options
# check_button = Checkbutton(window,
#                            text="Do u need to agree?",
#                            command=display,
#                            variable=x,
#                            onvalue=1,
#                            offvalue=0,
#                            font=('Arial', 10),  # Corrected 'front' to 'font'
#                            fg='#1c733c',
#                            bg='#030303',
#                            activeforeground='#1c733c',
#                            activebackground='#030303',
#                            padx=25,
#                            pady=10,
#                            image=python_photo,
#                            compound='left')

# # Use pack to add the checkbutton to the window
# check_button.pack()

#  Start the main loop
# window.mainloop()

# from tkinter import *
# def order():
#     if((x.get()==0)):
#         print("U order Burger")
#     elif((x.get())==1):
#         print("U order the pizza")
#     elif(x.get()==2):
#         print("U order the hotdog")
# def exitaction():
#     print("See u next time")
#     window.destroy()
#     window.quit()
# window = Tk()
# window.title("Aung")
# icon_photo = PhotoImage(file='image.png')
# window.iconphoto(True,icon_photo)
# pizzaimage = PhotoImage(file='C:\\Users\\USER\\Downloads\\Pizzza.png')
# hotdogimage= PhotoImage(file='C:\\Users\\USER\\Downloads\\hotdog.png')
# burgerimage= PhotoImage(file='C:\\Users\\USER\\Downloads\\Burger.png')
# food = ['Burger','pizza','hotdog']
# food_images=[burgerimage,pizzaimage,hotdogimage]
# x=IntVar()
# y=StringVar()
# for index in range(len(food)):
#     radio_button = Radiobutton(window,
#                                text=food[index],
#                                variable=x,
#                                value=index,
#                                padx=25,
#                                font=("Impact",50),
#                                image=food_images[index],
#                                compound=LEFT,
#                                indicatoron=0,
#                                width=372,
#                                command=order,
#                                )
                         
#     radio_button.pack(side=TOP,anchor=W)
# exit_button = Button(window,
#                          text="Exit",
#                          compound=RIGHT,
#                          command=exitaction)
                             
# exit_button.pack(anchor=W,padx=10,pady=20,ipadx=194,ipady=30)
# window.mainloop()
# from tkinter import *
# window = Tk()
# def submit():
#     print("the temperature is " + str(scale.get()) +" degree")
# hotimage = PhotoImage(file="C:\\Users\\USER\\Downloads\\hotlogo.png")    
# hotlabel = Label(image=hotimage)
# hotlabel.pack()
# scale = Scale(window,
#               from_=100,
#               to=0,
#               length=400,
#               orient=VERTICAL,
#               font=('Arial', 20),
#               tickinterval=10,
#               resolution=5,
#               troughcolor="#05b5eb",
#               fg= "#b30000",
#               bg= "#000000"
            
# )
# scale.set(((scale['from']-scale['to'])/2) + scale['to'])
# scale.pack()
# coldimage = PhotoImage(file="C:\\Users\\USER\\Downloads\\coldlogo.png")    
# coldabel = Label(image=coldimage)
# coldabel.pack()
# scale_submit = Button(window,
#                       text="submit",
#                       command=submit,
#                       background="red"
#                       )
# scale_submit.pack()
# window.mainloop()



# from tkinter import *

# def update_label(value):
#     # Update the label text to the current scale value
#     label.config(text=value)
    
#     # Calculate the new position for the label to keep it next to the slider
#     scale_range = scale_from - scale_to
#     label_y = scale.winfo_y() + scale_length - (int(value) - scale_to) * scale_length / scale_range
#     label.place(x=scale.winfo_x() + scale.winfo_width() + 10, y=label_y)

# # Create the main window
# window = Tk()
# window.geometry("500x720")  # Set the size of the window
# window.title("AUNG")  # Set the title of the window
# window.config(background="#2f1075")  # Set the background color of the window

# # Define the length and range for the scale
# scale_length = 600
# scale_from = 1000
# scale_to = 0

# # Create a vertical scale widget
# scale = Scale(window,
#               from_=scale_from,  # Set the start value of the scale
#               to=scale_to,  # Set the end value of the scale
#               length=scale_length,  # Set the length of the scale
#               orient=VERTICAL,  # Make the scale vertical
#               font=('Arial', 20),  # Set the font for the scale
#               tickinterval=100,  # Set the interval for tick marks
#               resolution=20,  # Set the step size for the scale
#               command=update_label)  # Bind the update function to the scale

# # Create a label widget to display the current value of the scale
# label = Label(window, font=('Arial', 20), background="#2f1075", foreground="white")
# label.place(x=400, y=0)  # Place the label initially

# # Set the scale to a specific initial value
# initial_value = 500
# scale.set(initial_value)

# # Update the label to reflect the initial value of the scale
# update_label(initial_value)

# # Pack the scale widget into the window
# scale.pack(side=LEFT, padx=20, pady=20)

# # Run the main loop to display the window
# window.mainloop()




# from tkinter import *

# def update_label(value):
#     # Update the text on the scale widget to display the current value
#     scale.configure(label=value)

# Create the main window
# window = Tk()
# window.geometry("500x720")
# window.title("AUNG")
# window.config(background="#2f1075")

# scale_length = 600
# scale_from = 1000
# scale_to = 0

# # Create a scale widget
# scale = Scale(window,
#               from_=scale_from,
#               to=scale_to,
#               length=scale_length,
#               orient=VERTICAL,
#               font=('Arial', 20),
#               tickinterval=100,
#               resolution=20,
# )
#             #   command=update_label

# # Set the scale to a specific initial value
# initial_value = 500
# scale.set(initial_value)

# # Pack the scale widget into the window
# scale.pack(side=LEFT, padx=20, pady=20)

# # Run the main loop
# window.mainloop()





from tkinter import *
food=[]
# Define the submit function with an argument
def submit():
    global food
    for index ,value  in  enumerate(listbox.curselection()):
        food.insert(index,listbox.get(value))
    print("You Ordered:")
    for index in food:
        print(index)
def add():
    
      listbox.insert(listbox.size(),entry.get())
      listbox.config(height=listbox.size())
      
def delete():
    ordernumber =1 
    for index ,value in enumerate(reversed((listbox.curselection()))):
       listbox.delete(value)
       print(f"the deleted item of order  is No.{ordernumber} : {listbox.get(value)} ")
       ordernumber +=1
    listbox.config(height=listbox.size())
def cancel():
    ordernumber =0
    global myorders
    myorders=[]
    selection_box = listbox.curselection()
    print("Cancel Orders")
    
    for index in selection_box:
        myorders.append(listbox.get(index))   
        
    for ordernumber,value in enumerate(myorders):
            print(f"the cancel order of the items isno.{ordernumber+1} and  item:{value} ")
    listbox.select_clear(0,END)

# Create the main window
window = Tk()

# Create a Listbox widget
listbox = Listbox(window,
                  bg="#f7ffde",
                  font=("Constantia", 25),
                  width=12,
                  selectmode=MULTIPLE)

# Add items to the Listbox
listbox.insert(0, "pizza")
listbox.insert(1, "pasta")
listbox.insert(2, "garlic bread")
listbox.insert(3, "soup")
listbox.insert(4, "salad")
listbox.config(height=listbox.size())

# Pack the Listbox widget into the window
listbox.pack()
entry = Entry(window)
entry.pack()
# Create a Button widget with a lambda function as the command
add_button = Button(window, command=add,text="add")
add_button.pack()
submit_button = Button(window, command=submit,text="Submit")
submit_button.pack()

delete_button = Button(window, command=delete,text="delete")
delete_button.pack()
cancel_button = Button(window, command=cancel,text="cancel")
cancel_button.pack()
# Run the main loop to display the window
window.mainloop()




from tkinter import *
# food=[]
# # Define the submit function with an argument
# def submit():
#     global food
#     for index ,value  in  enumerate(listbox.curselection()):
#         food.insert(index,listbox.get(value))
#     print("You Ordered:")
#     for index in food:
#         print(index)
# def add():
    
#       listbox.insert(listbox.size(),entry.get())
#       listbox.config(height=listbox.size())
# def delete():
   
#     select_indices = list(listbox.curselection())  # Convert to a list to modify in place
#     print(select_indices)
#     myorders = []   
#     # Iterate over selected indices in ascending order
#     for ordernumber, value in enumerate(select_indices):
#         print(f"The delete order of the items is no.{ordernumber} and item: {listbox.get(value)}")
#     # Adjust listbox height
#     listbox.config(height=listbox.size())

# def cancel():
#     ordernumber =0
#     global myorders
#     myorders=[]
#     selection_box = listbox.curselection()
#     print("Cancel Orders")
    
#     for index in selection_box:
#         myorders.append(listbox.get(index))   
        
#     for ordernumber,value in enumerate(myorders):
#             print(f"the cancel order of the items isno.{ordernumber+1} and  item:{value} ")
#     listbox.select_clear(0,END)

# # Create the main window
# window = Tk()

# # Create a Listbox widget
# listbox = Listbox(window,
#                   bg="#f7ffde",
#                   font=("Constantia", 25),
#                   width=12,
#                   selectmode=MULTIPLE)

# # Add items to the Listbox
# listbox.insert(0, "pizza")
# listbox.insert(1, "pasta")
# listbox.insert(2, "garlic bread")
# listbox.insert(3, "soup")
# listbox.insert(4, "salad")
# listbox.config(height=listbox.size())

# # Pack the Listbox widget into the window
# listbox.pack()
# entry = Entry(window)
# entry.pack()
# # Create a Button widget with a lambda function as the command
# add_button = Button(window, command=add,text="add")
# add_button.pack()
# submit_button = Button(window, command=submit,text="Submit")
# submit_button.pack()

# delete_button = Button(window, command=delete,text="delete")
# delete_button.pack()
# cancel_button = Button(window, command=cancel,text="cancel")
# cancel_button.pack()
# # Run the main loop to display the window
# window.mainloop()














